# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S04N0P2YzY8GkHdDO-sYaHDorLRasLk8
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import random
import torch.nn.functional as F
from collections import Counter
# %matplotlib inline

words = open('test.txt','r').read().splitlines()
words[:10]

#模型加载
model = torch.load('model.torch')
C, w1, b1, w2, b2 = model['C'], model['w1'], model['b1'], model['w2'], model['b2']

#同训练集
char_counter = Counter(''.join(words))
chars = sorted(char_counter.keys())
stoi = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s,i in stoi.items()}
len(itos)

#同训练集
letter=3
random.seed(42)
random.shuffle(words)
X, Y = [], []
for w in words:
    for i in range(len(w)):
        context = [0] *  letter
        for j in range( letter):
            if i -  letter + j < 0:
                context[j] = 0
            else:
                context[j] = stoi[w[i -  letter + j]]
        X.append(context)
        Y.append(stoi[w[i]] if i < len(w) - 1 else stoi['.'])
X = torch.tensor(X)
Y = torch.tensor(Y)
print(X.shape, Y.shape,X,Y)

#预测名字
seed = random.randint(0, 2**32 - 1)
g = torch.Generator().manual_seed(seed)
for i in range(10):
    out = []
    context = [0] * letter
    while True:
      sr = C[torch.tensor([context])]
      h = torch.tanh(sr.view(1, -1) @ w1 + b1)
      logits = h @ w2 + b2
      probs = F.softmax(logits, dim=1)
      ix = torch.multinomial(probs, num_samples=1, generator=g).item()
      context = context[1:] + [ix]
      out.append(ix)
      if ix == 0:
        break

    print(''.join(itos[i] for i in out))